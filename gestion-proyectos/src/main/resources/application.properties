spring.config.import=optional:file:.env[.properties]

spring.application.name=Plataforma de gestion de proyectos
server.port=${PORT:8800}
spring.datasource.url=${DATABASE_JDBC_URL}
spring.datasource.username=${DATABASE_USER}
spring.datasource.password=${DATABASE_PASSWORD}
spring.jpa.properties.hibernate.dialect = org.hibernate.dialect.PostgreSQLDialect

#Si primer inicio, poner create y cambiar luego a update para no perder datos
spring.jpa.generate-ddl=true
spring.jpa.show-sql=false
spring.jpa.hibernate.ddl-auto=${HIBERNATE_DDL_AUTO:update}

# Maximo de un archivo
spring.servlet.multipart.max-file-size=20MB
# Maximo de todos los archivos y parte del json
spring.servlet.multipart.max-request-size=25MB
# Whether to the upload directory should be resolved as an absolute path
spring.servlet.multipart.resolve-lazily=false

# Autorización OAuth2
spring.security.oauth2.client.registration.google.client-id=${GOOGLE_CLIENT_ID}
spring.security.oauth2.client.registration.google.client-secret=${GOOGLE_CLIENT_SECRET}
spring.security.oauth2.client.registration.google.scope=https://www.googleapis.com/auth/userinfo.email, https://www.googleapis.com/auth/calendar.events, https://www.googleapis.com/auth/meetings.space.created, https://www.googleapis.com/auth/meetings.space.readonly
spring.security.oauth2.client.provider.google.authorization-uri=https://accounts.google.com/o/oauth2/v2/auth
spring.security.oauth2.client.provider.google.token-uri=https://oauth2.googleapis.com/token
# https://www.googleapis.com/oauth2/v2/userinfo
spring.security.oauth2.client.provider.google.user-info-uri=https://www.googleapis.com/userinfo/v2/me
spring.security.oauth2.client.registration.google.redirect-uri=http://localhost:3000/authorize/callback
# spring.security.oauth2.client.registration.google.redirect-uri=https://ceu.cepascloud.online/authorize/callback
# app name
spring.security.oauth2.client.registration.google.client-name==Consultorías CEU

# si se desea generar script de creacion de la base de datos
# spring.jpa.properties.javax.persistence.schema-generation.create-source=metadata
# spring.jpa.properties.javax.persistence.schema-generation.scripts.action=create
# spring.jpa.properties.javax.persistence.schema-generation.scripts.create-target=create.sql